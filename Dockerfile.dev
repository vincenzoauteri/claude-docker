# Minimalistic development environment with Go, Node.js, Git, and Vim

FROM ubuntu:24.04

# Avoid interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC

# Install essential system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    git \
    vim \
    build-essential \
    ca-certificates \
    sudo \
    gosu \
    python3 \
    python3-pip \
    python3-venv \
    lsb-release \
    && rm -rf /var/lib/apt/lists/*

# Install Docker CLI
RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg && \
    echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null && \
    apt-get update && apt-get install -y docker-ce-cli && \
    rm -rf /var/lib/apt/lists/*

# Install Go (latest stable version)
ENV GO_VERSION=1.21.5
RUN wget -O go.tar.gz "https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz" && \
    tar -C /usr/local -xzf go.tar.gz && \
    rm go.tar.gz

# Set Go environment
ENV PATH="/usr/local/go/bin:${PATH}"
ENV GOPATH="/go"
ENV GOROOT="/usr/local/go"

# Create Go directories with proper permissions
RUN mkdir -p /go/bin /go/pkg /go/src && \
    chmod -R 755 /go

# Install Node.js 22 LTS
RUN curl -fsSL https://deb.nodesource.com/setup_lts.x | bash - && \
    apt-get install -y nodejs

# Update npm to latest version
RUN npm install -g npm@latest

RUN npm install -g @anthropic-ai/claude-code

RUN npm install -g @google/gemini-cli

# Accept build arguments for UID/GID
ARG USER_UID=1000
ARG USER_GID=1000

# Handle existing ubuntu user and create developer user with matching UID/GID
RUN if getent passwd ${USER_UID}; then \
        EXISTING_USER=$(getent passwd ${USER_UID} | cut -d: -f1); \
        echo "Renaming existing user $EXISTING_USER (UID ${USER_UID}) to developer"; \
        usermod -l developer -d /home/developer -m $EXISTING_USER 2>/dev/null || true; \
        groupmod -n developer $(getent group ${USER_GID} | cut -d: -f1) 2>/dev/null || true; \
    else \
        if getent group ${USER_GID}; then \
            GROUP_NAME=$(getent group ${USER_GID} | cut -d: -f1); \
        else \
            groupadd -g ${USER_GID} developer; \
        fi && \
        useradd -m -s /bin/bash -u ${USER_UID} -g ${USER_GID} developer; \
    fi && \
    echo "developer ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers && \
    groupadd -f docker && \
    usermod -aG docker developer && \
    chown -R developer:developer /go

# Fix npm global permissions for developer user
RUN mkdir -p /home/developer/.npm-global && \
    chown -R developer:developer /home/developer/.npm-global && \
    chown -R developer:developer /usr/lib/node_modules || true

# Create Python virtual environment for developer user
RUN python3 -m venv /home/developer/.venv && \
    chown -R developer:developer /home/developer/.venv

# Create workspace directory with proper permissions
RUN mkdir -p /workspace && \
    chown -R developer:developer /workspace

# Switch to developer user
USER developer
WORKDIR /home/developer

# Configure npm to use user directory for global packages
RUN npm config set prefix '/home/developer/.npm-global'
ENV PATH="/home/developer/.npm-global/bin:$PATH"

# Activate Python virtual environment by default
ENV VIRTUAL_ENV="/home/developer/.venv"
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

# Basic Git configuration
RUN git config --global init.defaultBranch main && \
    git config --global user.name "Developer" && \
    git config --global user.email "developer@example.com"

# Copy and set up Vim configuration if it exists
# Create a basic .vimrc if none exists
RUN echo 'syntax on' > /home/developer/.vimrc && \
    echo 'set number' >> /home/developer/.vimrc && \
    echo 'set tabstop=4' >> /home/developer/.vimrc && \
    echo 'set shiftwidth=4' >> /home/developer/.vimrc && \
    echo 'set expandtab' >> /home/developer/.vimrc

# If you have a custom .vimrc, uncomment the next line:
# COPY --chown=developer:developer .vimrc /home/developer/.vimrc

# Install only essential Go tools
RUN go install golang.org/x/tools/cmd/goimports@latest

# Upgrade pip and install essential Python packages in virtual environment
RUN python3 -m pip install --upgrade pip setuptools wheel

# Set workspace as working directory
WORKDIR /workspace

# Default command
CMD ["/bin/bash"]
